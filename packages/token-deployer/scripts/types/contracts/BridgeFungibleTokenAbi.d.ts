/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.70.0
  Forc version: 0.48.1
  Fuel-Core version: 0.22.0
*/

import type {
  BigNumberish,
  BN,
  Bytes,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
  StdString,
} from 'fuels';

import type { Option, Enum } from "./common";

export enum BridgeFungibleTokenErrorInput { UnauthorizedSender = 'UnauthorizedSender', IncorrectAssetDeposited = 'IncorrectAssetDeposited', NoCoinsSent = 'NoCoinsSent', NoRefundAvailable = 'NoRefundAvailable', OverflowError = 'OverflowError', UnderflowError = 'UnderflowError', AssetNotFound = 'AssetNotFound' };
export enum BridgeFungibleTokenErrorOutput { UnauthorizedSender = 'UnauthorizedSender', IncorrectAssetDeposited = 'IncorrectAssetDeposited', NoCoinsSent = 'NoCoinsSent', NoRefundAvailable = 'NoRefundAvailable', OverflowError = 'OverflowError', UnderflowError = 'UnderflowError', AssetNotFound = 'AssetNotFound' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export type MetadataInput = Enum<{ B256: string, Bytes: Bytes, Int: BigNumberish, String: StdString }>;
export type MetadataOutput = Enum<{ B256: string, Bytes: Bytes, Int: BN, String: StdString }>;
export enum ReentrancyErrorInput { NonReentrant = 'NonReentrant' };
export enum ReentrancyErrorOutput { NonReentrant = 'NonReentrant' };

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { value: string };
export type AssetIdOutput = AssetIdInput;
export type ClaimRefundEventInput = { amount: string, from: string, token_address: string, token_id: string };
export type ClaimRefundEventOutput = ClaimRefundEventInput;
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type DepositEventInput = { amount: BigNumberish, from: string, to: IdentityInput };
export type DepositEventOutput = { amount: BN, from: string, to: IdentityOutput };
export type RawBytesInput = { ptr: BigNumberish, cap: BigNumberish };
export type RawBytesOutput = { ptr: BN, cap: BN };
export type RefundRegisteredEventInput = { amount: string, token_address: string, token_id: string, from: string };
export type RefundRegisteredEventOutput = RefundRegisteredEventInput;
export type WithdrawalEventInput = { amount: BigNumberish, from: IdentityInput, to: string };
export type WithdrawalEventOutput = { amount: BN, from: IdentityOutput, to: string };

export type BridgeFungibleTokenAbiConfigurables = {
  DECIMALS: BigNumberish;
  BRIDGED_TOKEN_DECIMALS: BigNumberish;
  BRIDGED_TOKEN_GATEWAY: string;
  BRIDGED_TOKEN: string;
  NAME: string;
  SYMBOL: string;
};

interface BridgeFungibleTokenAbiInterface extends Interface {
  functions: {
    process_message: FunctionFragment;
    asset_to_sub_id: FunctionFragment;
    bridged_token: FunctionFragment;
    bridged_token_decimals: FunctionFragment;
    bridged_token_gateway: FunctionFragment;
    claim_refund: FunctionFragment;
    register_bridge: FunctionFragment;
    withdraw: FunctionFragment;
    decimals: FunctionFragment;
    name: FunctionFragment;
    symbol: FunctionFragment;
    total_assets: FunctionFragment;
    total_supply: FunctionFragment;
    metadata: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'process_message', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'asset_to_sub_id', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'bridged_token', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'bridged_token_decimals', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'bridged_token_gateway', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'claim_refund', values: [string, string, string]): Uint8Array;
  encodeFunctionData(functionFragment: 'register_bridge', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'withdraw', values: [string]): Uint8Array;
  encodeFunctionData(functionFragment: 'decimals', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'name', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'symbol', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'total_assets', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'total_supply', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'metadata', values: [AssetIdInput, StdString]): Uint8Array;

  decodeFunctionData(functionFragment: 'process_message', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'asset_to_sub_id', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'bridged_token', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'bridged_token_decimals', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'bridged_token_gateway', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'claim_refund', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'register_bridge', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'withdraw', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'decimals', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'name', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'symbol', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_assets', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_supply', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'metadata', data: BytesLike): DecodedValue;
}

export class BridgeFungibleTokenAbi extends Contract {
  interface: BridgeFungibleTokenAbiInterface;
  functions: {
    process_message: InvokeFunction<[msg_idx: BigNumberish], void>;
    asset_to_sub_id: InvokeFunction<[asset_id: AssetIdInput], string>;
    bridged_token: InvokeFunction<[], string>;
    bridged_token_decimals: InvokeFunction<[], number>;
    bridged_token_gateway: InvokeFunction<[], string>;
    claim_refund: InvokeFunction<[from: string, token_address: string, token_id: string], void>;
    register_bridge: InvokeFunction<[], void>;
    withdraw: InvokeFunction<[to: string], void>;
    decimals: InvokeFunction<[asset: AssetIdInput], Option<number>>;
    name: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    symbol: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    total_assets: InvokeFunction<[], BN>;
    total_supply: InvokeFunction<[asset: AssetIdInput], Option<BN>>;
    metadata: InvokeFunction<[asset: AssetIdInput, _key: StdString], Option<MetadataOutput>>;
  };
}
