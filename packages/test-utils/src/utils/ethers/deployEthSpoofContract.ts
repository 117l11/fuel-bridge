
import {
    Contract,
    ContractFactory,
  } from "ethers";

import { debug } from '../logs';
import type { TestEnvironment } from '../setup';



const _abi = [
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "bytes32",
				"name": "sender",
				"type": "bytes32"
			},
			{
				"indexed": true,
				"internalType": "bytes32",
				"name": "recipient",
				"type": "bytes32"
			},
			{
				"indexed": true,
				"internalType": "uint256",
				"name": "nonce",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint64",
				"name": "amount",
				"type": "uint64"
			},
			{
				"indexed": false,
				"internalType": "bytes",
				"name": "data",
				"type": "bytes"
			}
		],
		"name": "MessageSent",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bytes32",
				"name": "recipient",
				"type": "bytes32"
			}
		],
		"name": "xplt",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	}
] as const;

const _bytecode =
    "60c0604052601060808190526f233ab2b62fa2aa2429b837b7b32b191960811b60a09081526100319160009190610044565b5034801561003e57600080fd5b50610118565b828054610050906100dd565b90600052602060002090601f01602090048101928261007257600085556100b8565b82601f1061008b57805160ff19168380011785556100b8565b828001600101855582156100b8579182015b828111156100b857825182559160200191906001019061009d565b506100c49291506100c8565b5090565b5b808211156100c457600081556001016100c9565b600181811c908216806100f157607f821691505b6020821081141561011257634e487b7160e01b600052602260045260246000fd5b50919050565b610424806101276000396000f3fe6080604052600436106100295760003560e01c806306fdde031461002e57806386225c7014610059575b600080fd5b34801561003a57600080fd5b5061004361006e565b6040516100509190610320565b60405180910390f35b61006c61006736600461033a565b6100fc565b005b6000805461007b90610353565b80601f01602080910402602001604051908101604052809291908181526020018280546100a790610353565b80156100f45780601f106100c9576101008083540402835291602001916100f4565b820191906000526020600020905b8154815290600101906020018083116100d757829003601f168201915b505050505081565b739fe46736679d2d9a65f0992f2272de9f3c7fa6e07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc556000336001600160a01b031663e04c8bca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561016e57600080fd5b505afa158015610182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a6919061038e565b610161819055604080516000808252602082019092526044810185905291925080336064840160408051601f198184030181529181526020820180516001600160e01b0316636b46cea760e11b1790525161020191906103a7565b600060405180830381855af49150503d806000811461023c576040519150601f19603f3d011682016040523d82523d6000602084013e610241565b606091505b50915091508161025057600080fd5b8115801561025f575060008151115b1561026d5780518082602001fd5b8385336001600160a01b031660001b7f2e8c88b204c4fc9f27811757a7ca53a385ca4d1c8a2c6b0aa2bc386646f0ca6367ffffffffffffffff876040516102b59291906103c3565b60405180910390a45050505050565b60005b838110156102df5781810151838201526020016102c7565b838111156102ee576000848401525b50505050565b6000815180845261030c8160208601602086016102c4565b601f01601f19169290920160200192915050565b60208152600061033360208301846102f4565b9392505050565b60006020828403121561034c57600080fd5b5035919050565b600181811c9082168061036757607f821691505b6020821081141561038857634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156103a057600080fd5b5051919050565b600082516103b98184602087016102c4565b9190910192915050565b67ffffffffffffffff831681526040602082015260006103e660408301846102f4565b94935050505056fea2646970667358221220915e00e7b139de153c2648fd7205136ada7fd03dbdc3f45319ed95008dd7081864736f6c63430008090033";



export async function deployEthSpoofContract(env: TestEnvironment) {
    debug('Setting up environment...');
    const ethDeployer = env.eth.signers[0];
    const ethDeployerAddr = await ethDeployer.getAddress();
    const ethAcct = env.eth.signers[0];

    debug(`Deploying EthSpoof contract to test with...`);
    const implFactory = new ContractFactory(_abi, _bytecode, ethDeployer);
    const implContract = await implFactory
        .deploy()
        .then((tx) => tx.waitForDeployment());

    const ethSpoofAddress = await implContract.getAddress();
    const ethSpoof = new Contract(ethSpoofAddress, _abi, ethAcct);
    const name = await ethSpoof.name();
    console.log(`WWeeeeee: ${name}`);

    debug(`Ethereum ${await ethSpoof.name()} contract deployed at ${ethSpoofAddress}.`);
    return ethSpoof;
}